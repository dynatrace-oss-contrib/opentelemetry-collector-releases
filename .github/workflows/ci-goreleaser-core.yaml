name: CI - Core - GoReleaser

on:
  merge_group:
  push:
    branches:
      - main
      - release/*
    paths:
      - "distributions/otelcol/**"
      - "cmd/**"
      - ".github/**"
      - "scripts/**"
      - "Makefile"
      - "go.mod"
      - "go.sum"
  pull_request:
    branches:
      - main
      - release/*
    paths:
      - "distributions/otelcol/**"
      - "cmd/**"
      - ".github/**"
      - "scripts/**"
      - "Makefile"
      - "go.mod"
      - "go.sum"

jobs:
  check-goreleaser:
    name: CI - Core - GoReleaser
    uses: ./.github/workflows/base-ci-goreleaser.yaml
    with:
      distribution: otelcol
      goos: '[ "linux", "windows", "darwin" ]'
      goarch: '[ "386", "amd64", "arm", "arm64", "ppc64le", "riscv64", "s390x" ]'
    secrets: inherit

  package-tests:
    name: Package tests
    needs: check-goreleaser
    uses: ./.github/workflows/base-package-tests.yaml
    with:
      distribution: otelcol
      type: '[ "deb", "rpm" ]'

  msi-tests:
    name: MSI tests
    needs: check-goreleaser
    uses: ./.github/workflows/msi-tests.yaml
    with:
      distribution: otelcol
      type: '[ "msi" ]'

  nightly-cleanup:
    name: Nightly Cleanup
    runs-on: ubuntu-24.04
#    needs: nightly-release

    steps:
#      - uses: actions/create-github-app-token@a8d616148505b5069dccd32f177bb87d7f39123b # v2.1.1
#        id: otelbot-token
#        with:
#          app-id: ${{ vars.OTELBOT_COLLECTOR_RELEASES_APP_ID }}
#          private-key: ${{ secrets.OTELBOT_COLLECTOR_RELEASES_PRIVATE_KEY }}
#          permission-contents: write

      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0
#          token: ${{ steps.otelbot-token.outputs.token }}

      - name: Fetch tags to delete
        env:
          DOCKERHUB_USERNAME: ${{ vars.DOCKER_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKER_TOKEN_COLLECTOR_RELEASES }}
          DOCKERHUB_REPO: otel
          GHCR_USERNAME: ${{ github.repository_owner }}
          GHCR_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cutoff_date=$(date -d "2 weeks ago" +%s)
          echo "Cutoff date to delete tags is: $cutoff_date"
          tags=$(git tag | grep -v "cmd" | grep -E "nightly\." | sort --version-sort)

          for tag in $tags; do
            echo "working on tag $tag ..."
            # Extract the timestamp part (e.g., 202508120233)
            timestamp=$(echo "$tag" | grep -oP '\d{12}')

            # Convert the timestamp to epoch time

            tag_date=$(date -d "${timestamp:0:8} ${timestamp:8:2}:${timestamp:10:2}" +%s)
            echo "epochs to compare: cutoff: $cutoff_date | current: $tag_date"

            # Compare the tag date with the cutoff date
            if [[ $tag_date -lt $cutoff_date ]]; then
              echo "Old tag: $tag"
#              curl -X DELETE \
#                -u "$DOCKERHUB_USERNAME:$DOCKERHUB_TOKEN" \
#                "https://hub.docker.com/v2/repositories/$DOCKERHUB_REPO/$image_name/tags/$tag/" || echo "Failed to delete tag from dockerhub: $tag"
#
#              version_id=$(curl -s -H "Authorization: Bearer $GHCR_PAT" \
#                "https://api.github.com/orgs/${{ github.repository_owner }}/packages/container/$package_name/versions?per_page=100" \
#                | jq -r --arg TAG "$tag" '.[] | select(.metadata.container.tags[] == $TAG) | .id')
#
#              curl -X DELETE \
#                -H "Authorization: Bearer $GHCR_PAT" \
#                "https://api.github.com/orgs/${{ github.repository_owner }}/packages/container/$package_name/versions/$tag" || echo "Failed to delete tag from dockerhub: $tag"
            fi
          done
